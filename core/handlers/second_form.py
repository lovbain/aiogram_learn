from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from core.utils.statesform import StepsForm2
from core.filters.zapret import zapret
from core.keyboards.inline import ssilka
from core.keyboards.reply import adm, keyboard_nazad, keyboard_number
from index import ADMIN_ID, ADMIN_1, ADMIN_2, ADMIN_3


async def get_second_form(message: Message, state: FSMContext):
    await message.answer(
        f"–û—Ç–ø—Ä–∞–≤–ª—è—è –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –≤—ã –¥–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –µ–≥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ '–ü—Å–∏—Ö–æ–ª–æ–≥–∏ –§–ú–®' –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ. üëá\n–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–∏–∫–∞–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. ü§´",
        reply_markup=ssilka)
    await message.answer(
        f"–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ª–∏—á–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥—É –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ.\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. üßë‚Äçüíª",
        reply_markup=keyboard_nazad)
    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚úèÔ∏è", reply_markup=keyboard_nazad)
    await state.set_state(StepsForm2.VOPROS)


async def get_second_vopros(message: Message, state: FSMContext):
    spisok = message.text.split(' ')
    count = 0
    count1 = 0
    for slova in spisok:
        for i in zapret:
            if i == slova:
                count += 1
            else:
                continue
    for i in zapret:
        if i in message.text:
            count1 += 1
        else:
            continue
    if count != 0 or count1 != 0:
        await message.answer(f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üôå",
                             reply_markup=keyboard_nazad)
        await state.set_state(StepsForm2.VOPROS)
    else:
        await message.answer(
            f"1 - –ù–∏—á–∫–æ–≤–∞ –ü–æ–ª–∏–Ω–∞ –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞\n2 - –í–∞—Ä—Ñ–æ–ª–æ–º–µ–µ–≤–∞ –Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞\n3 - –ò–≤–∞–Ω–Ω–∏–∫–æ–≤–∞ –ü–æ–ª–∏–Ω–∞ –í—è—á–µ—Å–ª–∞–≤–æ–≤–Ω–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å",
            reply_markup=keyboard_number)

        await state.update_data(vopros=message.text)
        await state.set_state(StepsForm2.GET_PSYH)


async def get_psyh(message: Message, state: FSMContext, bot):
    context_data = await state.get_data()
    vopros = context_data.get("vopros")
    data_user = f"–ê–Ω–æ–Ω–∏–º–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ üì®:\r\n" \
                f"'{vopros}'\n\n"
    data_user_for_user = f"–í–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å ‚úâÔ∏è:\r\n" \
                         f"'{vopros}'\n\n"
    if message.text == "1":
        await message.answer(data_user_for_user)
        await message.answer(
            f"–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥—É. üì™\n–°–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ '–ü—Å–∏—Ö–æ–ª–æ–≥–∏ –§–ú–®' –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ. üëá",
            reply_markup=ssilka)
        await bot.send_message(ADMIN_1, text=data_user)
        await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üßë‚Äçüíª", reply_markup=adm)
        await state.clear()
    elif message.text == "2":
        await message.answer(data_user_for_user)
        await message.answer(
            f"–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥—É. üì™\n–°–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ '–ü—Å–∏—Ö–æ–ª–æ–≥–∏ –§–ú–®' –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ. üëá",
            reply_markup=ssilka)
        await bot.send_message(ADMIN_2, text=data_user)
        await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üßë‚Äçüíª", reply_markup=adm)
        await state.clear()
    elif message.text == "3":
        await message.answer(data_user_for_user)
        await message.answer(
            f"–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥—É. üì™\n–°–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ '–ü—Å–∏—Ö–æ–ª–æ–≥–∏ –§–ú–®' –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ. üëá",
            reply_markup=ssilka)
        await bot.send_message(ADMIN_3, text=data_user)
        await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üßë‚Äçüíª", reply_markup=adm)
        await state.clear()
    elif message.text == "–í—Å–µ–º":
        await message.answer(data_user_for_user)
        await message.answer(
            f"–ê–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º. üì™\n–°–∫–æ—Ä–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ '–ü—Å–∏—Ö–æ–ª–æ–≥–∏ –§–ú–®' –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ. üëá",
            reply_markup=ssilka)
        await bot.send_message(ADMIN_1, text=data_user)
        await bot.send_message(ADMIN_2, text=data_user)
        await bot.send_message(ADMIN_3, text=data_user)
        await bot.send_message(ADMIN_ID, text=data_user)
        await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üßë‚Äçüíª", reply_markup=adm)
        await state.clear()
    else:
        await message.answer(f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å üôå")