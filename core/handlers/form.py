from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from core.utils.statesform import StepsForm
from core.keyboards.reply import keyboard_number, keyboard_nazad
from core.filters.zapret import zapret
from core.keyboards.reply import adm
from index import ADMIN_1, ADMIN_2, ADMIN_3



async def get_form(message: Message, state: FSMContext):
    spisok = message.text.split(' ')
    count = 0
    count1 = 0
    for slova in spisok:
        for i in zapret:
            if i == slova:
                count += 1
            else:
                continue
    for i in zapret:
        if i in message.text:
            count1 += 1
        else:
            continue
    if count != 0 or count1 != 0:
        await message.answer(f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üôå",
                             reply_markup=keyboard_nazad)
        await state.clear()
    else:
        await message.answer(
            f"{message.from_user.first_name},\n–î–ª—è –Ω–∞–∏–±–æ–ª–µ–µ –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞–º –Ω—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –∫–ª–∞—Å—Å, –≤–æ–∑—Ä–∞—Å—Ç, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º. üí¨\n\n–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–Ω–∫–µ—Ç—É. üìã\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é, –∏–º—è ‚úèÔ∏è",
            reply_markup=keyboard_nazad)
        await state.set_state(StepsForm.GET_NAME)


async def get_name(message: Message, state: FSMContext):
    spisok = message.text.split(' ')
    count = 0
    count1 = 0
    for slova in spisok:
        for i in zapret:
            if i == slova:
                count += 1
            else:
                continue
    for i in zapret:
        if i in message.text:
            count1 += 1
        else:
            continue
    if count != 0 or count1 != 0:
        await message.answer(f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üôå",
                             reply_markup=keyboard_nazad)
        await state.set_state(StepsForm.GET_NAME)
    else:
        await message.answer(f"–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è, –∏–º—è: {message.text}\r\n–í –∫–∞–∫–æ–º –≤—ã –∫–ª–∞—Å—Å–µ?\n(—Ü–∏—Ñ—Ä–∞ –∏ –±—É–∫–≤–∞) ‚úèÔ∏è",
                             reply_markup=keyboard_nazad)
        await state.update_data(name=message.text)
        await state.set_state(StepsForm.GET_CLASSS)


async def get_classs(message: Message, state: FSMContext):
    spisok = message.text.split(' ')
    count = 0
    count1 = 0
    for slova in spisok:
        for i in zapret:
            if i == slova:
                count += 1
            else:
                continue
    for i in zapret:
        if i in message.text:
            count1 += 1
        else:
            continue
    if count != 0 or count1 != 0:
        await message.answer(f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üôå",
                             reply_markup=keyboard_nazad)
        await state.set_state(StepsForm.GET_CLASSS)
    else:
        await message.answer(f"–í–∞—à –∫–ª–∞—Å—Å: {message.text}\r\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç ‚úèÔ∏è", reply_markup=keyboard_nazad)
        await state.update_data(classs=message.text)
        await state.set_state(StepsForm.GET_AGE)


async def get_age(message: Message, state: FSMContext):
    spisok = message.text.split(' ')
    count = 0
    count1 = 0
    for slova in spisok:
        for i in zapret:
            if i == slova:
                count += 1
            else:
                continue
    for i in zapret:
        if i in message.text:
            count1 += 1
        else:
            continue
    if count != 0 or count1 != 0:
        await message.answer(f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üôå",
                             reply_markup=keyboard_nazad)
        await state.set_state(StepsForm.GET_AGE)
    else:
        await message.answer(f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç: {message.text}\r\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚úèÔ∏è", reply_markup=keyboard_nazad)
        await state.update_data(vozrast=message.text)
        await state.set_state(StepsForm.GET_VOPROS)

async def get_vopros(message: Message, state: FSMContext, ):
    spisok = message.text.split(' ')
    count = 0
    count1 = 0
    for slova in spisok:
        for i in zapret:
            if i == slova:
                count += 1
            else:
                continue
    for i in zapret:
        if i in message.text:
            count1 += 1
        else:
            continue
    if count != 0 or count1 != 0:
        await message.answer(f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üôå",
                             reply_markup=keyboard_nazad)
        await state.set_state(StepsForm.GET_VOPROS)
    else:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è", reply_markup=keyboard_nazad)
        await state.update_data(vopros=message.text)
        await state.set_state(StepsForm.GET_NUMBER)

async def get_number(message: Message, state: FSMContext):
    spisok = message.text.split(' ')
    count = 0
    count1 = 0
    for slova in spisok:
        for i in zapret:
            if i == slova:
                count += 1
            else:
                continue
    for i in zapret:
        if i in message.text:
            count1 += 1
        else:
            continue
    if count != 0 or count1 != 0:
        await message.answer(f"–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üôå",
                             reply_markup=keyboard_nazad)
        await state.set_state(StepsForm.GET_NUMBER)
    else:
        await message.answer(
            f"1 - –ù–∏—á–∫–æ–≤–∞ –ü–æ–ª–∏–Ω–∞ –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞\n2 - –í–∞—Ä—Ñ–æ–ª–æ–º–µ–µ–≤–∞ –Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞\n3 - –ò–≤–∞–Ω–Ω–∏–∫–æ–≤–∞ –ü–æ–ª–∏–Ω–∞ –í—è—á–µ—Å–ª–∞–≤–æ–≤–Ω–∞\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –ø—Å–∏—Ö–æ–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å üî¢",
            reply_markup=keyboard_number)
        await state.update_data(number=message.text)
        await state.set_state(StepsForm.GET_PSYH)



async def get_psyh(message: Message, state: FSMContext, bot):
    context_data = await state.get_data()
    name = context_data.get("name")
    classs = context_data.get("classs")
    vozrast = context_data.get("vozrast")
    vopros = context_data.get("vopros")
    number = context_data.get("number")
    data_user = f"üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\r\n" \
                f" * –§–∞–º–∏–ª–∏—è, –∏–º—è: {name}\r\n" \
                f" * –ö–ª–∞—Å—Å: {classs}\r\n" \
                f" * –í–æ–∑—Ä–∞—Å—Ç: {vozrast}\n" \
                f" * –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {number}\n" \
                f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}: '{vopros}'\n\n"
    await message.answer(data_user)
    await state.clear()
    if message.text == "1":
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ù–∏—á–∫–æ–≤–æ–π –ü–æ–ª–∏–Ω–µ –î–º–∏—Ç—Ä–∏–µ–≤–Ω–µ",
                             reply_markup=keyboard_nazad)
        await bot.send_message(ADMIN_1, text=data_user)
        await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üßë‚Äçüíª", reply_markup=adm)
    elif message.text == "2":
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–∞—Ä—Ñ–æ–ª–æ–º–µ–µ–≤–æ–π –Æ–ª–∏–∏ –°–µ—Ä–≥–µ–µ–≤–Ω–µ",
                             reply_markup=keyboard_nazad)
        await bot.send_message(ADMIN_2, text=data_user)
        await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üßë‚Äçüíª", reply_markup=adm)
    elif message.text == "3":
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ò–≤–∞–Ω–Ω–∏–∫–æ–≤–æ–π –ü–æ–ª–∏–Ω–µ –í—è—á–µ—Å–ª–∞–≤–æ–≤–Ω–µ",
                             reply_markup=keyboard_nazad)
        await bot.send_message(ADMIN_3, text=data_user)
        await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üßë‚Äçüíª", reply_markup=adm)
    elif message.text == "–í—Å–µ–º":
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞–º",
                             reply_markup=keyboard_nazad)
        await bot.send_message(ADMIN_1, text=data_user)
        await bot.send_message(ADMIN_2, text=data_user)
        await bot.send_message(ADMIN_3, text=data_user)
        await message.answer(f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üßë‚Äçüíª", reply_markup=adm)
        await state.clear()
    else:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä ‚úèÔ∏è")